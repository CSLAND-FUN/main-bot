import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ComponentType,
  EmbedBuilder,
  escapeMarkdown,
  Message,
} from "discord.js";
import { Queue, RepeatMode, Song } from "distube";
import { Event } from "@src/classes/Event";
import { v4 as uuid } from "uuid";
import DiscordBot from "@src/classes/Discord";

export = class PlaySongEvent extends Event<false, true> {
  constructor() {
    super("playSong", "player");
  }

  async run(client: DiscordBot, queue: Queue, song: Song) {
    const uploader = escapeMarkdown(song.uploader?.name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π");
    const name = escapeMarkdown(song?.name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");

    const embed = new EmbedBuilder();
    embed.setAuthor({
      name: "CSLAND | –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é",
      iconURL: client.user.avatarURL({ forceStatic: true, size: 2048 }),
    });
    embed.setTitle(`${uploader} - ${name}`);
    embed.setDescription(
      [
        `‚Ä∫ **–ó–∞–ø—Ä–æ—Å–∏–ª**: ${song.user.toString()}`,
        `‚Ä∫ **–î–ª–∏–Ω–∞ –ø–µ—Å–Ω–∏**: **${song.formattedDuration}**`,
      ].join("\n")
    );
    embed.setURL(song.url);
    embed.setThumbnail(song.thumbnail ?? null);
    embed.setTimestamp(new Date());

    const music_control_row =
      new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setCustomId(`resume-button_${uuid().slice(0, 5)}`)
          .setLabel("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
          .setEmoji("‚ñ∂"),

        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setCustomId(`pause-button_${uuid().slice(0, 5)}`)
          .setLabel("–ü–∞—É–∑–∞")
          .setEmoji("‚è∏")
      );

    const queue_control_row =
      new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setCustomId(`stop-button_${uuid().slice(0, 5)}`)
          .setLabel("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
          .setEmoji("‚èπ"),

        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setCustomId(`skip-button_${uuid().slice(0, 5)}`)
          .setLabel("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
          .setEmoji("‚è≠")
      );

    const repeat_control_row =
      new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setCustomId(`song-repeat-button_${uuid().slice(0, 5)}`)
          .setLabel("–ü–æ–≤—Ç–æ—Ä –ø–µ—Å–Ω–∏")
          .setEmoji("üîÇ"),

        new ButtonBuilder()
          .setStyle(ButtonStyle.Primary)
          .setCustomId(`queue-repeat-button_${uuid().slice(0, 5)}`)
          .setLabel("–ü–æ–≤—Ç–æ—Ä –æ—á–µ—Ä–µ–¥–∏")
          .setEmoji("üîÅ"),

        new ButtonBuilder()
          .setStyle(ButtonStyle.Secondary)
          .setCustomId(`disable-repeat-button_${uuid().slice(0, 5)}`)
          .setLabel("–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä")
          .setEmoji("‚ùå")
      );

    const msg = await queue.textChannel.send({
      embeds: [embed],
      components: [music_control_row, queue_control_row, repeat_control_row],
    });

    await this.handleButtons(client, msg, song);
  }

  async handleButtons(client: DiscordBot, message: Message, song: Song) {
    const collector = await message.createMessageComponentCollector({
      componentType: ComponentType.Button,
      time: song.duration * 1000,

      filter: (int) => {
        const ids = [
          "resume-button",
          "pause-button",
          "stop-button",
          "skip-button",
          "song-repeat-button",
          "queue-repeat-button",
          "disable-repeat-button",
        ];

        const regexp = new RegExp(ids.join("|"));
        return (
          song.user.id === int.user.id && regexp.exec(int.customId) !== null
        );
      },
    });

    collector.on("collect", (int) => {
      if (!int.isButton()) return;

      if (int.customId.includes("resume-button")) {
        const queue = client.player.getQueue(int.guild.id);
        if (!queue) {
          int.reply({
            content: "‚ùå | **–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!**",
            ephemeral: true,
          });

          return;
        } else if (queue.paused === false) {
          int.reply({
            content: "‚ùå | **–ü–µ—Å–Ω—è –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∞ –ø–∞—É–∑–µ!**",
            ephemeral: true,
          });

          return;
        }

        queue.resume();
        int.reply({
          content: "‚úÖ | **–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –±—ã–ª–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ!**",
          ephemeral: true,
        });

        return;
      } else if (int.customId.includes("pause-button")) {
        const queue = client.player.getQueue(int.guild.id);
        if (!queue) {
          int.reply({
            content: "‚ùå | **–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!**",
            ephemeral: true,
          });

          return;
        } else if (queue.paused === true) {
          int.reply({
            content: "‚ùå | **–ü–µ—Å–Ω—è —É–∂–µ —Å—Ç–æ–∏—Ç –Ω–∞ –ø–∞—É–∑–µ!**",
            ephemeral: true,
          });

          return;
        }

        queue.pause();
        int.reply({
          content: "‚úÖ | **–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –±—ã–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!**",
          ephemeral: true,
        });

        return;
      } else if (int.customId.includes("stop-button")) {
        const queue = client.player.getQueue(int.guild.id);
        if (!queue) {
          int.reply({
            content: "‚ùå | **–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!**",
            ephemeral: true,
          });

          return;
        }

        queue.stop();
        int.reply({
          content: "‚úÖ | **–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –±—ã–ª–æ –æ–∫–æ–Ω—á–µ–Ω–æ!**",
          ephemeral: true,
        });

        return;
      } else if (int.customId.includes("skip-button")) {
        const queue = client.player.getQueue(int.guild.id);
        if (!queue) {
          int.reply({
            content: "‚ùå | **–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!**",
            ephemeral: true,
          });

          return;
        }

        queue.skip();
        int.reply({
          content: "‚úÖ | **–¢–µ–∫—É—â–∞—è –ø–µ—Å–Ω—è –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞!**",
          ephemeral: true,
        });

        return;
      } else if (int.customId.includes("song-repeat-button")) {
        const queue = client.player.getQueue(int.guild.id);
        if (!queue) {
          int.reply({
            content: "‚ùå | **–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!**",
            ephemeral: true,
          });

          return;
        }

        queue.setRepeatMode(RepeatMode.SONG);
        int.reply({
          content: "‚úÖ | **–ë—ã–ª –≤–∫–ª—é—á—ë–Ω –ø–æ–≤—Ç–æ—Ä –ø–µ—Å–Ω–∏!**",
          ephemeral: true,
        });

        return;
      } else if (int.customId.includes("queue-repeat-button")) {
        const queue = client.player.getQueue(int.guild.id);
        if (!queue) {
          int.reply({
            content: "‚ùå | **–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!**",
            ephemeral: true,
          });

          return;
        }

        queue.setRepeatMode(RepeatMode.QUEUE);
        int.reply({
          content: "‚úÖ | **–ë—ã–ª –≤–∫–ª—é—á—ë–Ω –ø–æ–≤—Ç–æ—Ä –æ—á–µ—Ä–µ–¥–∏!**",
          ephemeral: true,
        });

        return;
      } else if (int.customId.includes("disable-repeat-button")) {
        const queue = client.player.getQueue(int.guild.id);
        if (!queue) {
          int.reply({
            content: "‚ùå | **–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!**",
            ephemeral: true,
          });

          return;
        }

        queue.setRepeatMode(RepeatMode.DISABLED);
        int.reply({
          content: "‚úÖ | **–ü–æ–≤—Ç–æ—Ä –ø–µ—Å–Ω–∏/–æ—á–µ—Ä–µ–¥–∏ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω!**",
          ephemeral: true,
        });

        return;
      }
    });
  }
};
