import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ComponentType,
  EmbedBuilder,
  Message,
  bold,
} from "discord.js";
import { Command, CommandCategory } from "@src/classes/Command";
import DiscordBot from "@src/classes/Discord";
import EventEmitter from "node:events";

const buttonEmitter = new EventEmitter();

export = class ClanCreateCommand extends Command {
  constructor() {
    super({
      category: CommandCategory.CLANS,
      name: "clan-create",

      description: "–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
    });
  }

  async run(client: DiscordBot, message: Message, args: string[]) {
    const isInClan = await client.clans.isInClan(message.author.id);
    if (isInClan) {
      const embed = this.embed("Red", bold("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!"), "‚ùå");
      return message.reply({
        embeds: [embed],
      });
    }

    const clan_name = await this.waitForAnswer(
      "clan_name",
      message,
      "üí¨ | –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ (–Ω–µ –±–æ–ª–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤)",
      35
    );

    if (!clan_name) {
      const embed = this.embed("Red", bold("–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –∏–º—è –∫–ª–∞–Ω–∞!"), "‚ùå");
      return message.reply({
        embeds: [embed],
      });
    }

    const clans = await client.clans.getClans();
    if (clans.find((x) => x.name === clan_name)) {
      const embed = this.embed(
        "Red",
        bold("–ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"),
        "‚ùå"
      );

      return message.reply({
        embeds: [embed],
      });
    }

    const clan_description = await this.waitForAnswer(
      "clan_description",
      message,
      "üí¨ | –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–ª–∞–Ω (–Ω–µ –±–æ–ª–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤)",
      40
    );

    const clan_tag = await this.waitForAnswer(
      "clan_tag",
      message,
      "üí¨ | –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–≥ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ (–±–µ–∑ —Å–∫–æ–±–æ–∫/–∫–æ–≤—ã—á–µ–∫, –Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤)",
      40
    );

    if (clans.find((x) => x.tag === clan_tag)) {
      const embed = this.embed(
        "Red",
        bold("–ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"),
        "‚ùå"
      );

      return message.reply({
        embeds: [embed],
      });
    }

    const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder()
        .setCustomId("closed")
        .setStyle(ButtonStyle.Primary)
        .setLabel("–ó–∞–∫—Ä—ã—Ç—ã–π")
        .setEmoji("0Ô∏è‚É£"),

      new ButtonBuilder()
        .setCustomId("for_everyone")
        .setStyle(ButtonStyle.Primary)
        .setLabel("–î–ª—è –≤—Å–µ—Ö")
        .setEmoji("1Ô∏è‚É£")
    );

    await this.waitForButton(
      "clan_type",
      message,
      row,
      "üí¨ | –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞",
      40
    );

    var clan_type: number = null;
    buttonEmitter.once("gotButton-clan_type", async (type) => {
      if (type === "closed") {
        clan_type = 0;
        return;
      } else if (type === "for_everyone") {
        clan_type = 1;
        return;
      }
    });

    while (clan_type === null) {
      await this.sleep(100);
    }

    const result = await client.clans.createClan(
      message.author.id,
      clan_name,
      clan_description,
      clan_tag,
      clan_type
    );

    if (result.status !== true) {
      const embed = this.embed("Red", bold(result.message), "‚ùå");
      return message.channel.send({
        content: message.author.toString(),
        embeds: [embed],
      });
    }

    const embed = this.embed("DarkPurple", bold(result.message), "‚úÖ");
    message.channel.send({
      content: message.author.toString(),
      embeds: [embed],
    });

    const nickname = message.member.displayName;
    return await message.member.edit({
      nick: `[${clan_tag}] ${nickname}`,
    });
  }

  async sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  async waitForAnswer(
    id: string,
    message: Message,
    question: string,
    seconds: number
  ) {
    const embed = new EmbedBuilder()
      .setColor("DarkPurple")
      .setAuthor({
        name: message.author.username,
        iconURL: message.author.displayAvatarURL({ forceStatic: true }),
      })
      .setDescription(bold(question))
      .setFooter({
        text: `–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç - ${seconds} —Å–µ–∫—É–Ω–¥.`,
      });

    await message.channel.send({
      content: message.author.toString(),
      embeds: [embed],
    });

    const collected = await message.channel.awaitMessages({
      filter: (m) => m.author.id === message.author.id,
      time: seconds * 10000,
      max: 1,
    });

    if (collected.size) {
      const msg = collected.first();

      if (id === "clan_name" && msg.content.length > 25) {
        await msg.reply({
          embeds: [
            this.embed(
              "Red",
              [
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤.",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑!",
              ].join("\n"),
              "‚ùå"
            ),
          ],
        });

        return;
      } else if (id === "clan_description" && msg.content.length > 150) {
        await msg.reply({
          embeds: [
            this.embed(
              "Red",
              [
                "–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 150 —Å–∏–º–≤–æ–ª–æ–≤.",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑!",
              ].join("\n"),
              "‚ùå"
            ),
          ],
        });

        return;
      } else if (id === "clan_tag" && msg.content.length > 15) {
        await msg.reply({
          embeds: [
            this.embed(
              "Red",
              [
                "–¢–µ–≥ –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑!",
              ].join("\n"),
              "‚ùå"
            ),
          ],
        });

        return;
      }

      return msg.content;
    } else {
      return null;
    }
  }

  async waitForButton(
    id: string,
    message: Message,
    row: ActionRowBuilder<ButtonBuilder>,
    question: string,
    seconds: number
  ) {
    const embed = new EmbedBuilder()
      .setColor("DarkPurple")
      .setAuthor({
        name: message.author.username,
        iconURL: message.author.displayAvatarURL({ forceStatic: true }),
      })
      .setDescription(bold(question))
      .setFooter({
        text: `–í—Ä–µ–º—è –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ - ${seconds} —Å–µ–∫—É–Ω–¥.`,
      });

    await message.channel.send({
      content: message.author.toString(),
      embeds: [embed],
      components: [row],
    });

    const collector = message.channel.createMessageComponentCollector({
      componentType: ComponentType.Button,
      filter: (m) => m.user.id === message.author.id,
      time: seconds * 10000,
      max: 1,
    });

    collector.on("collect", async (btn) => {
      btn.update({
        components: [],
      });

      buttonEmitter.emit(`gotButton-${id}`, btn.customId);
    });
  }
};
