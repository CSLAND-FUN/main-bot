/*
  ! –ù–æ–≤–æ–≥–æ–¥–Ω—è—è —Ä–∞–∑–¥–∞—á–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å 31.12.2022 –ø–æ 08.01.2023
  
  ? –ï—Å—Ç—å 4 —Ç–∏–ø–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤:
  ? - –ë–æ–Ω—É—Å—ã;
  ? - –í–∞—É—á–µ—Ä –Ω–∞ –¥–µ–Ω—å–≥–∏;
  ? - –í–∞—É—á–µ—Ä –Ω–∞ —Å–∫–∏–¥–∫—É;
  ? - –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É [–ø—Ä–æ–º–æ–∫–æ–¥ - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –≤–∞—É—á–µ—Ä];

  ? –ü–æ–¥–∞—Ä–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø—É—Ç—ë–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞.
*/

import { bold, Message, TextChannel } from "discord.js";
import { Command, CommandCategory } from "@src/classes/Command";
import DiscordBot from "@src/classes/Discord";
import Functions from "@src/classes/Functions";

import { FormData, request } from "undici";
import random from "random";

const ms = 86400000;

export = class NewYearCommand extends Command {
  constructor() {
    super({
      category: CommandCategory.OTHER,
      name: "newyear",

      description: "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–æ–≤–æ–≥–æ–¥–Ω—è—è —Ä–∞–∑–¥–∞—á–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞.",
    });
  }

  async run(client: DiscordBot, message: Message, args: string[]) {
    const data = await client.bonuses.data(message.author.id);
    const next_time = Number(data.newyear_used) + ms;

    if (data.newyear_used !== null && Date.now() < next_time) {
      // prettier-ignore
      const date = new Date(next_time).toLocaleString("ru", { timeZone: "Europe/Moscow" });
      const embed = this.embed(
        "Red",
        bold(
          [
            `–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –±–æ–Ω—É—Å!`,
            `–ñ–¥—ë–º –≤–∞—Å ${date}`,
          ].join("\n")
        ),
        "‚ùå"
      );

      return message.reply({
        embeds: [embed],
      });
    }

    const give_bonuses = random.int(0, 1) === 0 ? false : true;
    const random_choose = [1, 1, 1, 2, 3, 3, 3];
    const pick =
      give_bonuses === false
        ? random_choose[Math.floor(Math.random() * random_choose.length)]
        : random.int(100, 250);

    if (give_bonuses === false) {
      var value = 0;

      if (pick === 1) {
        value = random.int(30, 50); //? –û—Ç 30 –¥–æ 50 —Ä—É–±–ª–µ–π
      } else if (pick === 2) {
        value = random.int(10, 20); //? –û—Ç 10 –¥–æ 20%
      } else if (pick === 3) {
        value = random.int(15, 30); //? –û—Ç 15 –¥–æ 30%
      }

      const form = new FormData();
      form.append("generate", 1);
      form.append("type", pick);
      form.append("value", value);

      const data = await (
        await request(process.env.API_BASE_URL, {
          body: form,
          method: "POST",

          headers: {
            TOKEN: process.env.API_SECRET_TOKEN,
          },
        })
      ).body.json();

      if (data.success === false) {
        const embed = this.embed(
          "Red",
          bold(
            `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, —É–ø–æ–º—è–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã!`
          ),
          "‚ùå"
        );

        return message.reply({
          embeds: [embed],
        });
      }

      const embed = this.embed(
        "DarkPurple",
        bold(
          [
            `–í –∫–∞—á–µ—Å—Ç–≤–µ –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ ${data.pretty_type}!`,
            `–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!`,
          ].join("\n")
        ),
        "üéÅ"
      );

      message.reply({
        embeds: [embed],
      });

      const to_user = this.embed(
        "DarkPurple",
        bold(
          [
            `–í–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞ - ${data.pretty_type}!`,
            `‚Ä∫ –ö–ª—é—á: ${data.key}`,
            `‚Ä∫ –°—É–º–º–∞: ${data.val}`,
          ].join("\n")
        ),
        "üéÅ"
      );

      try {
        await message.author.send({
          embeds: [to_user],
        });
      } catch (e) {
        const embed = this.embed(
          "Red",
          bold(
            `–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°, —É–ø–æ–º—è–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞!`
          ),
          "‚ùå"
        );

        return message.channel.send({
          content: message.author.toString(),
          embeds: [embed],
        });
      }

      const info_embed = this.embed(
        "DarkPurple",
        bold(
          [
            `‚Ä∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${message.author.toString()}`,
            `‚Ä∫ –¢–∏–ø: ${data.pretty_type}`,
            `‚Ä∫ –ö–ª—é—á: ||${data.key}||`,
            `‚Ä∫ –°—É–º–º–∞/–°–∫–∏–¥–∫–∞: ${data.val}`,
          ].join("\n")
        )
      );

      const channel = message.guild.channels.cache.get(
        process.env.NOTIFICATIONS_CHANNEL_ID
      ) as TextChannel;

      channel.send({
        embeds: [info_embed],
      });

      return;
    }

    await client.bonuses.update(
      message.author.id,
      "newyear_used",
      Date.now().toString()
    );

    await client.bonuses.update(
      message.author.id,
      "bonuses",
      data.bonuses + pick
    );

    const word = Functions.declOfNum(pick, ["–±–æ–Ω—É—Å", "–±–æ–Ω—É—Å–∞", "–±–æ–Ω—É—Å–æ–≤"]);
    const embed = this.embed(
      "DarkPurple",
      bold(`–í –∫–∞—á–µ—Å—Ç–≤–µ –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ ${pick} ${word}!`),
      "üéÅ"
    );

    return message.reply({
      embeds: [embed],
    });
  }
};
